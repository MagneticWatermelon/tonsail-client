/*
 Generated by typeshare 1.0.0
*/

export interface Test {
	title: string;
	scenarios: Scenario[];
}

export interface Scenario {
	name: string;
	timeout: string;
	stages: Stage[];
	requests: Request[];
}

export interface Request {
	name: string;
	method: string;
	url: string;
	headers?: Record<string, string>;
	body?: Body;
	timeout?: string;
}

export interface Stage {
	amount: number;
	duration: string;
}

export interface Plain {
	text: string;
}

export interface URLEncoded {
	map: Record<string, string>;
}

export interface FormData {
	map: Record<string, string>;
}

export interface Json {
	text: string;
}

export type Body = 
	| { type: "plain", content: Plain }
	| { type: "urlencoded", content: URLEncoded }
	| { type: "formdata", content: FormData }
	| { type: "json", content: Json };

